
import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

//This file is automatically generated. DO NOT EDIT, all your changes would be lost.

class S implements WidgetsLocalizations {
  const S();

  static const GeneratedLocalizationsDelegate delegate =
  const GeneratedLocalizationsDelegate();

  static S of(BuildContext context) =>
      Localizations.of<S>(context, WidgetsLocalizations);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get add => "Add";

  String get appTitle => "Super Simple Budget";

  String get beginNewCycle => "Begin new cycle";

  String get budget => "Budget";
  String get cancel => "Cancel";

  String get changeBudget => "Change budget";
  String get changeCurrency => "Change currency";

  String get chooseCurrency => "Choose currency";
  String get confirm => "Confirm";

  String get currencyEUR => "EUR (€)";
  String get currencyGBP => "GBP (£)";
  String get currencyPLN => "PLN (zł)";

  String get history => "History";

  String get leftToSpend => "Left to spend";
  String get newExpense => "New expense";

  String get startingBudget => "Starting budget";

  String get sumOfExpenses => "Sum of expenses";

  String currencyUSD(String) => "USD (\$)";
}

class en extends S {
  const en();
}

class pl extends S {
  const pl();

  @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get add => "Dodaj";
  @override
  String get cancel => "Anuluj";
  @override
  String get leftToSpend => "Zostało do wydania";
  @override
  String get sumOfExpenses => "Suma wydatków";
  @override
  String get startingBudget => "Budżet startowy";
  @override
  String get changeCurrency => "Zmień walutę";
  @override
  String get currencyEUR => "EUR (€)";
  @override
  String get history => "Historia";
  @override
  String get appTitle => "Super Prosty Budżet";
  @override
  String get confirm => "Zatwierdź";
  @override
  String get changeBudget => "Zmień budżet";
  @override
  String get currencyGBP => "GBP (£)";
  @override
  String get currencyPLN => "PLN (zł)";
  @override
  String get beginNewCycle => "Rozpocznij nowy okres";
  @override
  String get chooseCurrency => "Wybierz walutę";
  @override
  String get newExpense => "Nowy wydatek";
  @override
  String get budget => "Budżet";
  @override
  String currencyUSD(String) => "USD (\$)";
}


class GeneratedLocalizationsDelegate
    extends LocalizationsDelegate<WidgetsLocalizations> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[

      const Locale("en", ""),
      const Locale("pl", ""),

    ];
  }

  LocaleResolutionCallback resolution({Locale fallback}) {
    return (Locale locale, Iterable<Locale> supported) {
      final Locale languageLocale = new Locale(locale.languageCode, "");
      if (supported.contains(locale))
        return locale;
      else if (supported.contains(languageLocale))
        return languageLocale;
      else {
        final Locale fallbackLocale = fallback ?? supported.first;
        return fallbackLocale;
      }
    };
  }

  @override
  Future<WidgetsLocalizations> load(Locale locale) {
    final String lang = getLang(locale);
    switch (lang) {
      case "en":
        return new SynchronousFuture<WidgetsLocalizations>(const en());
      case "pl":
        return new SynchronousFuture<WidgetsLocalizations>(const pl());

      default:
        return new SynchronousFuture<WidgetsLocalizations>(const S());
    }
  }

  @override
  bool isSupported(Locale locale) => supportedLocales.contains(locale);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;
}

String getLang(Locale l) => l.countryCode != null && l.countryCode.isEmpty
    ? l.languageCode
    : l.toString();
